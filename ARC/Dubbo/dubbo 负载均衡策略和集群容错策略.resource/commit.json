{"compress":true,"commitItems":[["d40ce107-809d-4298-955c-6284c7b5abe1",1571726464931,"",[[1571726405496,["Administrator@zhrb",[[1,0,"dubbo 负载均衡策略和集群容错策略都有哪些？动态代理策略呢？\n\n## [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#%E9%9D%A2%E8%AF%95%E5%AE%98%E5%BF%83%E7%90%86%E5%88%86%E6%9E%90)面试官心理分析\n\n继续深问吧，这些都是用 dubbo 必须知道的一些东西，你得知道基本原理，知道序列化是什么协议，还得知道具体用 dubbo 的时候，如何负载均衡，如何高可用，如何动态代理。\n\n说白了，就是看你对 dubbo 熟悉不熟悉：\n\n*   dubbo 工作原理：服务注册、注册中心、消费者、代理通信、负载均衡；\n*   网络通信、序列化：dubbo 协议、长连接、NIO、hessian 序列化协议；\n*   负载均衡策略、集群容错策略、动态代理策略：dubbo 跑起来的时候一些功能是如何运转的？怎么做负载均衡？怎么做集群容错？怎么生成动态代理？\n*   dubbo SPI 机制：你了解不了解 dubbo 的 SPI 机制？如何基于 SPI 机制对 dubbo 进行扩展？\n\n## [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#%E9%9D%A2%E8%AF%95%E9%A2%98%E5%89%96%E6%9E%90)面试题剖析\n\n### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#dubbo-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5)dubbo 负载均衡策略\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#random-loadbalance)random loadbalance\n\n默认情况下，dubbo 是 random load balance ，即**随机**调用实现负载均衡，可以对 provider 不同实例**设置不同的权重**，会按照权重来负载均衡，权重越大分配流量越高，一般就用这个默认的就可以了。\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#roundrobin-loadbalance)roundrobin loadbalance\n\n这个的话默认就是均匀地将流量打到各个机器上去，但是如果各个机器的性能不一样，容易导致性能差的机器负载过高。所以此时需要调整权重，让性能差的机器承载权重小一些，流量少一些。\n\n举个栗子。\n\n跟运维同学申请机器，有的时候，我们运气好，正好公司资源比较充足，刚刚有一批热气腾腾、刚刚做好的虚拟机新鲜出炉，配置都比较高：8 核 + 16G 机器，申请到 2 台。过了一段时间，我们感觉 2 台机器有点不太够，我就去找运维同学说，“哥儿们，你能不能再给我一台机器”，但是这时只剩下一台 4 核 + 8G 的机器。我要还是得要。\n\n这个时候，可以给两台 8 核 16G 的机器设置权重 4，给剩余 1 台 4 核 8G 的机器设置权重 2。\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#leastactive-loadbalance)leastactive loadbalance\n\n这个就是自动感知一下，如果某个机器性能越差，那么接收的请求越少，越不活跃，此时就会给**不活跃的性能差的机器更少的请求**。\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#consistanthash-loadbalance)consistanthash loadbalance\n\n一致性 Hash 算法，相同参数的请求一定分发到一个 provider 上去，provider 挂掉的时候，会基于虚拟节点均匀分配剩余的流量，抖动不会太大。**如果你需要的不是随机负载均衡**，是要一类请求都到一个节点，那就走这个一致性 Hash 策略。\n\n### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#dubbo-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5)dubbo 集群容错策略\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#failover-cluster-%E6%A8%A1%E5%BC%8F)failover cluster 模式\n\n失败自动切换，自动重试其他机器，**默认**就是这个，常见于读操作。（失败重试其它机器）\n\n可以通过以下几种方式配置重试次数：\n\n```text-xml\n<dubbo:service retries=\"2\" />\n```\n\n或者\n\n```text-xml\n<dubbo:reference retries=\"2\" />\n```\n\n或者\n\n```text-xml\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n```\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#failfast-cluster-%E6%A8%A1%E5%BC%8F)failfast cluster 模式\n\n一次调用失败就立即失败，常见于非幂等性的写操作，比如新增一条记录（调用失败就立即失败）\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#failsafe-cluster-%E6%A8%A1%E5%BC%8F)failsafe cluster 模式\n\n出现异常时忽略掉，常用于不重要的接口调用，比如记录日志。\n\n配置示例如下：\n\n```text-xml\n<dubbo:service cluster=\"failsafe\" />\n```\n\n或者\n\n```text-xml\n<dubbo:reference cluster=\"failsafe\" />\n```\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#failback-cluster-%E6%A8%A1%E5%BC%8F)failback cluster 模式\n\n失败了后台自动记录请求，然后定时重发，比较适合于写消息队列这种。\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#forking-cluster-%E6%A8%A1%E5%BC%8F)forking cluster 模式\n\n**并行调用**多个 provider，只要一个成功就立即返回。常用于实时性要求比较高的读操作，但是会浪费更多的服务资源，可通过 `forks=\"2\"` 来设置最大并行数。\n\n#### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#broadcacst-cluster)broadcacst cluster\n\n逐个调用所有的 provider。任何一个 provider 出错则报错（从`2.1.0` 版本开始支持）。通常用于通知所有提供者更新缓存或日志等本地资源信息。\n\n### [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#dubbo%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AD%96%E7%95%A5)dubbo动态代理策略\n\n默认使用 javassist 动态字节码生成，创建代理类。但是可以通过 spi 扩展机制配置自己的动态代理策略。"]],[0,0],[4275,4275]]],[1571726468005,["Administrator@zhrb",[[-1,3287,"text-xml"]],[3287,3295],[3287,3287]]],[1571726475432,["Administrator@zhrb",[[-1,3229,"text-xml"]],[3229,3237],[3229,3229]]],[1571726479245,["Administrator@zhrb",[[-1,2703,"text-xml"]],[2703,2711],[2703,2703]]],[1571726480861,["Administrator@zhrb",[[-1,2650,"text-xml"]],[2650,2658],[2650,2650]]],[1571726483692,["Administrator@zhrb",[[-1,2599,"text-xml"]],[2599,2607],[2599,2599]]],[1571726485208,["Administrator@zhrb",[[1,2600,"\n"]],[2599,2599],[2600,2600]]],[1571726488475,["Administrator@zhrb",[[-1,2600,"\n"]],[2600,2600],[2599,2599]]],[1571726510642,["Administrator@zhrb",[[1,2601," "],[-1,3736," "],[1,3737," "],[-1,3748," "],[1,3749," "],[-1,3957," "],[1,3958," "]],[2601,2601],[2602,2602]]],[1571726514108,["Administrator@zhrb",[[-1,2601," "]],[2602,2602],[2601,2601]]],[1571726515339,["Administrator@zhrb",[[1,2601," "]],[2601,2601],[2602,2602]]],[1571726517662,["Administrator@zhrb",[[-1,2600,"< "]],[2602,2602],[2600,2600]]],[1571726523052,["Administrator@zhrb",[[1,2600,"< "]],[2600,2600],[2602,2602]]],[1571726527638,["Administrator@zhrb",[[-1,2601," "]],[2602,2602],[2601,2601]]],[1571728003721,["Administrator@zhrb",[[-1,34,"## [](https://github.com/zhangruibin/advanced-java/blob/master/docs/distributed-system/dubbo-load-balancing.md#%E9%9D%A2%E8%AF%95%E5%AE%98%E5%BF%83%E7%90%86%E5%88%86%E6%9E%90)面试官心理分析\n"]],[33,216],[33,33]]]],null,"Administrator@zhrb"]]}